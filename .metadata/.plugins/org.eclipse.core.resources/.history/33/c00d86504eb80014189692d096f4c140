package com.exam;

import static junitparams.JUnitParamsRunner.$;
import static org.junit.Assert.*;
import junitparams.Parameters;

import org.junit.Before;
import org.junit.Test;

public class CarParkFeeTest {
	private CarParkFee cpFee;
	private final static int VALID_HOUR = 3;
	private final static int VALID_DAY = 3;
	private final static int VALID_WEEK = 3;
	@Before
	public void setUp() throws Exception {
		cpFee = new CarParkFee();
	}
	
	@Parameters
	private static final Object[] getInvalidHour(){
		return $($(-1),$(35)
				);
	}
	@Parameters
	private static final Object[] getInvalidDay(){
		return $($(-1),$(9)
				);
	}
	@Parameters
	private static final Object[] getInvalidWeek(){
		return $($(-1),$(2)
				);
	}
	
	@Parameters
	private static final Object[] getValidValues(){
		return $($(1,1,1,0,10)
				);
	}
	
	@Test(expected = IllegalArgumentException.class)
	@Parameters(method = "getInvalidHour")
	public void calcFeeShouldThrowIAEForInvalidHour(int invalidHour) {
		cpFee.calculateFee(invalidHour, VALID_DAY, VALID_WEEK, false);
	}
	@Test(expected = IllegalArgumentException.class)
	@Parameters(method = "getInvalidDay")
	public void calcFeeShouldThrowIAEForInvalidDay(int invalidDay) {
		cpFee.calculateFee(VALID_HOUR, invalidDay, VALID_WEEK, false);
	}
	@Test(expected = IllegalArgumentException.class)
	@Parameters(method = "getInvalidWeek")
	public void calcFeeShouldThrowIAEForInvalidWeek(int invalidWeek) {
		cpFee.calculateFee(VALID_HOUR, VALID_DAY, invalidWeek, false);
	}

}
