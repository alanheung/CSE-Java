import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;


public class ProductDataTest {
	private ProductData myProductData;

	@Before
	public void setUp() {
		myProductData = new ProductData();
	}

	@Test
	public void testNoItemToBasket(){
		assertEquals(0,myProductData.getNumberInBasket());

	}

	@Test
	public void testAddAndRemoveItemToBasket(){
		assertEquals(0,myProductData.getNumberInBasket());
		Product milk = new Product("Milk",1.00,"Dairy",0,10, "images/milk.jpg", false);
		assertEquals(0,myProductData.getNumberInBasket());
		myProductData.addToBasket(milk, 3);
		assertEquals(3,myProductData.getNumberInBasket());
		myProductData.removeFromBasket(milk, 1);
		assertEquals(2,myProductData.getNumberInBasket());
		Product bread = new Product("Bread",1.00,"Bakery",0,10, "images/bread.jpg", false);
		myProductData.addToBasket(bread, 1);
		myProductData.removeFromBasket(bread, 1);
		assertFalse(myProductData.getBasket().contains(bread));
		myProductData.removeFromBasket(milk, 2);
	}
	


	@Test
	public void testGetSubTotal(){
		assertEquals(0,myProductData.getNumberInBasket());
		Product bread = new Product("Bread",1.00,"Bakery",0,10, "images/bread.jpg", true);
		myProductData.addToBasket(bread, 1);
		assertEquals(1,myProductData.getNumberInBasket());
		assertEquals(1.00, myProductData.getSubTotal(),.000001);
		myProductData.removeFromBasket(bread, 1);
	
	}
	
	@Test
	public void testGetTotal(){
		assertEquals(0,myProductData.getNumberInBasket());
		Product bread = new Product("Bread",1.00,"Bakery",0,10, "images/bread.jpg", false);		
		myProductData.addToBasket(bread, 1);
		myProductData.setSubTotal(1);
		assertEquals(1,myProductData.getNumberInBasket());
		assertEquals(1.1, myProductData.getTotal(),0.0001);
		myProductData.removeFromBasket(bread, 1);
	
	}
	
	@Test
	public void testFoundSearchedProducts(){
		Product product = new Product("Milk",1.50,"Dairy",0,10, "images/milk.jpg", false);

		myProductData.setSearchQuery("Milk");
		myProductData.conductSearch();
		assertEquals(true,product.isSearch());
	}
	
	@Test
	public void testNotFoundSearchedProducts(){
		Product product = new Product("Fish",1.50,"Dairy",1,15,"images/bread.jpg", false);
		myProductData.setSearchQuery("Fish");
		myProductData.conductSearch();
		assertEquals(true,product.isSearch());
	}
	@Test
	public void testResetFunction(){
		Product currentProduct = new Product("Milk",1.50,"Dairy",1,15,"images/bread.jpg", false);
		currentProduct.setSearch(false);
		myProductData.reset();
		assertEquals(false,currentProduct.isSearch());
	}
	
	@Test
	public void testIsBasketEmpty(){
		assertEquals("basket?faces-redirect=true", myProductData.isBasketEmpty());
		Product bread = new Product("Bread",1.00,"Bakery",0,10, false);
		myProductData.addToBasket(bread, 1);
		assertEquals("delivery?faces-redirect=true", myProductData.isBasketEmpty());
		myProductData.removeFromBasket(bread, 1);
	}
	
	
	@Test
	public void testAddAndNo(){
		myProductData.setNo("1");
		myProductData.setAdd("Stuff");
		assertEquals("1",myProductData.getNo());
		assertEquals("Stuff",myProductData.getAdd());
		myProductData.saveUserDetails("3:43 ", "John Smith", "Knock on door ");
		
	}
	
	
	@Test
	public void testTotal(){
		myProductData.setTotal(5.50);
		assertEquals(myProductData.getAllProducts(),myProductData.getProducts());
		
	}
}
