package com.mase.inheritance;

public class Art{
	Art(){System.out.println("Art constructor");}
	public void methodX(){System.out.println("Art::methodX");}
	@Override
	public String toString(){return "Art::toString";}
	}

	public class Drawing extends Art{
		Drawing(){System.out.println("Drawing constructor");}
		@Override
		public void methodX(){System.out.println("Drawing::methodX");}
		@Override
		public String toString(){return "Drawing::toString";}
	}

	public class Cartoon extends Drawing{
		Cartoon(){System.out.println("Cartoon constructor");}
		@Override
		public void methodX(){System.out.println("Cartoon::methodX");}
		public void y(){System.out.println("Cartoon::y");}
	
	public static void main(String[] args) {
		Cartoon c = new Cartoon();// Art constructor, Drawing constructor, Cartoon constructor
		
		methodY(new Cartoon()));// Art constructor, Drawing constructor, Cartoon constructor, Cartoon::methodX
		upcasting();
		downcasting();
	}
	
	public static void methodY(Art a){
		a.methodX();// methodX from Cartoon
//		a.y();//error - art has no methodY()
	}
	
	public static void upcasting(){
		//upcasting(implicity done)
		//a reference of type X can refer to an object of type X or any aubtype of X
		
		Art a1 = new Art(); //Art constructor
		System.out.println(a1); // Art::toString()
		
		Art a2 = new Drawing(); // Art constructor, Drawing constructor
		System.out.println(a2); // Drawing::toString()
		
		Art a3 = new Cartoon(); // Art constructor, Drawing constructor, Cartoon constructor
		System.out.println(a3); // Drawing::toString()
		
		
	}
}
