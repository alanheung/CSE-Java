
public class IPhone {
	private String model;
	private String network;
	private String plan;
	private double purchasePrice;
	private boolean billPay;
	private int gigabytes;
	private int rentalPerMonth;
	private static int count;

	public IPhone(){
		model="";
		network="";
		plan="";
		purchasePrice=0.0;
		billPay=false;
		gigabytes=0;
		rentalPerMonth=0;
		count++;
	}
	public IPhone(String model, String network, String plan, boolean billPay, int gigabytes){
		this.model=model;
		this.network=network;
		this.plan=plan;
		this.billPay=billPay;
		this.gigabytes=gigabytes;
		count++;
	}

	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public String getNetwork() {
		return network;
	}
	public void setNetwork(String network) {
		this.network = network;
	}
	public String getPlan() {
		return plan;
	}
	public void setPlan(String plan) {
		this.plan = plan;
	}
	public double getPurchasePrice() {
		return purchasePrice;
	}
	public void setPurchasePrice(double purchasePrice) {
		this.purchasePrice = purchasePrice;
	}
	public boolean isBillPay() {
		return billPay;
	}
	public void setBillPay(boolean billPay) {
		this.billPay = billPay;
	}
	public int getGigabytes() {
		return gigabytes;
	}
	public void setGigabytes(int gigabytes) {
		this.gigabytes = gigabytes;
	}
	public int getRentalPerMonth() {
		return rentalPerMonth;
	}
	public void setRentalPerMonth(int rentalPerMonth) {
		this.rentalPerMonth = rentalPerMonth;
	}
	public static int getCount(){
		return IPhone.count;
	}
	@Override
	public String toString(){
		return 	"The model is "+ getModel() + ", the network is "+ getNetwork()
				+", the plan is "+getPlan()+", billpay: "+isBillPay()+", gigabytes: "+getGigabytes();
	}
	public void billPriceAndRental(String network, String model) {
        double rentalCost=0.0;
        double purchasePrice=0.0;
		if(network.equalsIgnoreCase("Vodafone")&&model.equalsIgnoreCase("5")){
			switch (plan) {
			case "plus":if(gigabytes==16){
				purchasePrice=249;
				rentalCost=30;
				}else if(gigabytes==32){
					purchasePrice=299;
					rentalCost=35;
					}else if(gigabytes==64){
						purchasePrice=349;
						rentalCost=40;
						}else{
							purchasePrice=-1;
							rentalCost=-1;
							} ;
			break;
			
			case "complete":if(gigabytes==16){
				purchasePrice=129;
				rentalCost=65;
				}else if(gigabytes==32){
					purchasePrice=179;
					rentalCost=70;
					}else if(gigabytes==64){
						purchasePrice=329;
						rentalCost=75;
						}else{
							purchasePrice=-1;
							rentalCost=-1;
							} ;
			break;
			
			case "complete plus":if(gigabytes==16){
				rentalCost=75;
				purchasePrice=49;
				}else if(gigabytes==32){
					rentalCost=80;
					purchasePrice=99;
					}else if(gigabytes==64){
						rentalCost=85;
						purchasePrice=149;
						}else{
							rentalCost=-1;
							purchasePrice=-1;
							} ;
			break;
			}
		}
	}
}//
