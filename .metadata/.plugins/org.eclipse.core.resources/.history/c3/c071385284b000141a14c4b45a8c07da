import static org.junit.Assert.*;
import junitparams.JUnitParamsRunner;
import junitparams.Parameters;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import static junitparams.JUnitParamsRunner.$;

@RunWith(JUnitParamsRunner.class)

//boundary values jun >10 <17 20/30 9,10,11-16,17,18
// 				  sen >60 <90 40/50 59,60,61-89,90,91
public class CalculateGreenFeesTest {

	private final static int VALID_AGE = 65;	
	private final static int VALID_DOW = 5;
	private final static int INVALID_AGE = -1;
	private final static int INVALID_DOW = -7;

	
	static CalculateGolfFee GolfFee = new CalculateGolfFee();

	@Parameters
	private static final Object[] getWeekdayFees(){//age, elpaso, day, answer
		return $(
				$(9,false,1,45), 
				$(10,false,1,45),
				$(11,false,1,45),
				$(5,20.0,0.0),$(6,20.0,10.0),$(7,10.0,5.0), 
				$(16,15.0,7.50),$(17,15.0,7.5),$(18,12.0,12.0), 
				$(19,44.0,44.0),$(63,37.0,37.0), $(64,37.0,37.0),
				$(65,20.0,18.0), $(66,20.0,18.0)
				);
	}
	private static final Object[] getWeekendFees(){
		return $(
				$(0,1.0,0.0), $(1,10.0,0.0),$(4,20.0,0.0),
				$(5,20.0,0.0),$(6,20.0,10.0),$(7,10.0,5.0), 
				$(16,15.0,7.50),$(17,15.0,7.5),$(18,12.0,12.0), 
				$(19,44.0,44.0),$(63,37.0,37.0), $(64,37.0,37.0),
				$(65,20.0,18.0), $(66,20.0,18.0)
				);
	}
	private static final Object[] getElPasoFees(){
		return $(
	}
	
	@Parameters
	private static final Object[] getInvalidAge(){
		return $(
				$(-9),$(-4),$(-60)
				);
	}
	
	@Test
	@Parameters(method="getWeekdayFees")
	public void calculateFeeWeekdayValues(int age, boolean elPasoResident, int dayOfTheWeek, double fee){//passes the three values
		assertEquals(fee,GolfFee.calculateGreenFees(age, elPasoResident, dayOfTheWeek),0.0001);
	}
	
	@Test
	@Parameters(method="getWeekendFees")
	public void calculateFeeWeekendValues(int age, boolean elPasoResident, int dayOfTheWeek, double fee){//passes the three values
		assertEquals(fee,GolfFee.calculateGreenFees(age, elPasoResident, dayOfTheWeek),0.0001);
	}
	
	@Test(expected = IllegalArgumentException.class)
	@Parameters(method = "getInvalidAge")
	public void constructorShouldThrowIAEForInvalidAge(int invalidAge, boolean elPasoResident, int dayOfTheWeek) {
		GolfFee.calculateGreenFees(invalidAge,true,VALID_DOW);
	}
	
	@Test(expected = IllegalArgumentException.class)
	@Parameters(method = "getInvalidDayOfWeek")
	public void constructorShouldThrowIAEForInvalidDayOfWeek() {
		GolfFee.calculateGreenFees(VALID_AGE,true,INVALID_DOW);
	}
}
