import static org.junit.Assert.*;
import junitparams.JUnitParamsRunner;
import junitparams.Parameters;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import static junitparams.JUnitParamsRunner.$;

@RunWith(JUnitParamsRunner.class)

//boundary values jun >10 <17 20/30 9,10,11-16,17,18
// 				  sen >60 <90 40/50 59,60,61-89,90,91
public class CalculateGreenFeesTest {

	private final static double VALID_FEE = 45.0;
	private final static double INVALID_FEE = -1.1;
	private final static int VALID_AGE = 65;
	
	static CalculateGolfFee GolfFee = new CalculateGolfFee();

	@Parameters
	private static final Object[] getWeekdayFees(){//age elpaso day
		return $(
				$(0,1.0,0.0), $(1,10.0,0.0),$(4,20.0,0.0),
				$(5,20.0,0.0),$(6,20.0,10.0),$(7,10.0,5.0), 
				$(16,15.0,7.50),$(17,15.0,7.5),$(18,12.0,12.0), 
				$(19,44.0,44.0),$(63,37.0,37.0), $(64,37.0,37.0),
				$(65,20.0,18.0), $(66,20.0,18.0)
				);
	}
	private static final Object[] getWeekendFees(){
		return $(
				$(0,1.0,0.0), $(1,10.0,0.0),$(4,20.0,0.0),
				$(5,20.0,0.0),$(6,20.0,10.0),$(7,10.0,5.0), 
				$(16,15.0,7.50),$(17,15.0,7.5),$(18,12.0,12.0), 
				$(19,44.0,44.0),$(63,37.0,37.0), $(64,37.0,37.0),
				$(65,20.0,18.0), $(66,20.0,18.0)
				);
	}
	
	@Parameters
	private static final Object[] getInvalidAge(){
		return $(
				$(-1),$(-5),$(-40)
				);
	}
	
	@Test
	@Parameters(method="getWeekdayFees")
	public void calculateFeeWeekdayValues(int age, boolean elPaso, int dayOfTheWeek, double discountedFare){//passes the three values
		calcFare.setPeakTravelTime(true);
		assertEquals(discountedFare,calcFare.calculateDiscountedFare(age, fullFare),0.0001);
	}
}
