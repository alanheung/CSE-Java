import static org.junit.Assert.*;
import junitparams.JUnitParamsRunner;
import junitparams.Parameters;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
@RunWith(JUnitParamsRunner.class)

public class CalculateFareTest {
	private final static double VALID_FULL_FARE = 20.0;
	private final static double INVALID_FARE = -1.1;
	private final static double VALID_AGE = 20;

//	@Parameters
//	private static final Object[] getFares(){
//		return new Object[]{
//				new Object[]{1,10,0,false},
//				new Object[]{4,10,0,false},
//				new Object[]{5,10,5,false},
//				new Object[]{6,10,5,false},
//				new Object[]{7,10,5,false},
//				new Object[]{16,10,5,false},
//				new Object[]{17,10,5,false},
//				new Object[]{18,10,10,false},
//				new Object[]{19,10,10,false},
//				new Object[]{63,10,12,false},
//				new Object[]{64,10,12,false},
//				new Object[]{65,10,12,false},
//				new Object[]{63,10,11,true},
//				new Object[]{64,10,11,true},
//				new Object[]{65,10,11,true},
//		};
//	}
	//boundary values 0>=5 free -1,0,1 4,5,6
	//6>=17 0.5 discount 5,6,7 16,17,18
	//18>=64 full fare 17,18,19 63,64,65
	//>65 0.1 discount peak, 0.2 discount non-peak 66,
	
	@Parameters
	private static final Object[] getPeakHourValues(){
		return $(
				$(0,1.0,0.0)
				);
	}
	@Test
	@Parameters(method="getFares")
	public void test(int age, double fullFare, double result, boolean time){//passes the three values
		CalculateFare cf1 = new CalculateFare();//create the object
		assertEquals(result,cf1.calculateDiscountedFare(age, fullFare),0.01);
	}


}
