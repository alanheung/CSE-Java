<?xml version="1.0" encoding="UTF-8"?><testrun name="MovieCatalogTest" project="MovieCatalogProj" tests="10" started="10" failures="1" errors="0" ignored="0">
  <testsuite name="com.ait.movies.MovieCatalogTest" time="0.0">
    <testcase name="testOneMovies" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
    <testcase name="testTwoMovies" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
    <testcase name="testFindMovie" classname="com.ait.movies.MovieCatalogTest" time="0.0">
      <failure>java.lang.AssertionError: &#13;
	at org.junit.Assert.fail(Assert.java:91)&#13;
	at org.junit.Assert.assertTrue(Assert.java:43)&#13;
	at org.junit.Assert.assertFalse(Assert.java:68)&#13;
	at org.junit.Assert.assertFalse(Assert.java:79)&#13;
	at com.ait.movies.MovieCatalogTest.testFindMovie(MovieCatalogTest.java:56)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&#13;
	at java.lang.reflect.Method.invoke(Method.java:601)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;
&#13;
</failure>
    </testcase>
    <testcase name="testFindGenre" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
    <testcase name="testRentMovie" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
    <testcase name="testReturnMovie" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
    <testcase name="testIsMovieRented" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
    <testcase name="removeOneMovieFromCatalog" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
    <testcase name="testNoMoviesInCatalog" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
    <testcase name="testSearchMovieByName" classname="com.ait.movies.MovieCatalogTest" time="0.0"/>
  </testsuite>
</testrun>
